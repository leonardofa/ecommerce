package com.ecommerce.application.service;

import com.ecommerce.domain.model.Product;
import com.ecommerce.domain.port.ProductRepository;
import com.ecommerce.domain.port.ProductService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;

/**
 * Implementation of the ProductService interface.
 * This class implements the use cases defined in the ProductService interface.
 */
@Service
public class ProductServiceImpl implements ProductService {

    private final ProductRepository productRepository;

    public ProductServiceImpl(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    /**
     * Generates a unique SKU for a product.
     * The SKU is generated by taking the first 3 characters of the product name (uppercase)
     * and appending a random UUID.
     * @param name the name of the product
     * @return the generated SKU
     */
    private String generateSku(String name) {
        String prefix = name.substring(0, Math.min(3, name.length())).toUpperCase();
        String uuid = UUID.randomUUID().toString().substring(0, 8);
        return prefix + "-" + uuid;
    }

    @Override
    @Transactional
    public Product createProduct(String name, double price, int initialStock) {
        // Validate input
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Product name cannot be empty");
        }
        if (price <= 0) {
            throw new IllegalArgumentException("Product price must be greater than zero");
        }
        if (initialStock < 0) {
            throw new IllegalArgumentException("Initial stock cannot be negative");
        }

        // Check if product with same name already exists
        if (productRepository.existsByName(name)) {
            throw new IllegalArgumentException("A product with name '" + name + "' already exists");
        }

        // Create and save the product
        Product product = Product.builder()
                .sku(generateSku(name))
                .name(name)
                .price(price)
                .stock(initialStock)
                .enabled(true)
                .build();

        return productRepository.save(product);
    }

    @Override
    @Transactional
    public Product updateProduct(String sku, String name, double price) {
        // Validate input
        if (sku == null || sku.trim().isEmpty()) {
            throw new IllegalArgumentException("SKU cannot be empty");
        }
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Product name cannot be empty");
        }
        if (price <= 0) {
            throw new IllegalArgumentException("Product price must be greater than zero");
        }

        // Find the product
        Product product = productRepository.findBySku(sku)
                .orElseThrow(() -> new IllegalArgumentException("Product with SKU '" + sku + "' not found"));

        // Check if the new name is already taken by another product
        if (!product.getName().equals(name) && productRepository.existsByName(name)) {
            throw new IllegalArgumentException("A product with name '" + name + "' already exists");
        }

        // Update the product
        product.setName(name);
        product.setPrice(price);

        return productRepository.save(product);
    }

    @Override
    @Transactional
    public Product enableProduct(String sku) {
        // Find the product
        Product product = productRepository.findBySku(sku)
                .orElseThrow(() -> new IllegalArgumentException("Product with SKU '" + sku + "' not found"));

        // Enable the product
        product.enable();

        return productRepository.save(product);
    }

    @Override
    @Transactional
    public Product disableProduct(String sku) {
        // Find the product
        Product product = productRepository.findBySku(sku)
                .orElseThrow(() -> new IllegalArgumentException("Product with SKU '" + sku + "' not found"));

        // Disable the product
        product.disable();

        return productRepository.save(product);
    }

    @Override
    @Transactional
    public void deleteProduct(String sku) {
        // Find the product
        Product product = productRepository.findBySku(sku)
                .orElseThrow(() -> new IllegalArgumentException("Product with SKU '" + sku + "' not found"));

        // Check if the product can be deleted
        if (!product.canBeDeleted()) {
            throw new IllegalArgumentException("Product cannot be deleted because it is enabled or has stock");
        }

        // Delete the product
        productRepository.delete(product);
    }

    @Override
    @Transactional(readOnly = true)
    public Product getProductBySku(String sku) {
        return productRepository.findBySku(sku)
                .orElseThrow(() -> new IllegalArgumentException("Product with SKU '" + sku + "' not found"));
    }

    @Override
    @Transactional(readOnly = true)
    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }
}